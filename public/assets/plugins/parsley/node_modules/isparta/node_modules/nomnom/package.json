{
  "_args": [
    [
      {
        "raw": "nomnom@github:douglasduteil/nomnom#next",
        "scope": null,
        "escapedName": "nomnom",
        "name": "nomnom",
        "rawSpec": "github:douglasduteil/nomnom#next",
        "spec": "github:douglasduteil/nomnom#next",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:douglasduteil/nomnom.git#next",
          "sshUrl": "git+ssh://git@github.com/douglasduteil/nomnom.git#next",
          "httpsUrl": "git+https://github.com/douglasduteil/nomnom.git#next",
          "gitUrl": "git://github.com/douglasduteil/nomnom.git#next",
          "shortcut": "github:douglasduteil/nomnom#next",
          "directUrl": "https://raw.githubusercontent.com/douglasduteil/nomnom/next/package.json"
        }
      },
      "C:\\Users\\Oscar\\Documents\\PCW\\1.Movilidad\\pcw_mov_server_web\\public\\assets\\plugins\\parsley\\node_modules\\isparta"
    ]
  ],
  "_from": "douglasduteil/nomnom#next",
  "_id": "nomnom@1.8.1",
  "_inCache": true,
  "_location": "/isparta/nomnom",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nomnom@github:douglasduteil/nomnom#next",
    "scope": null,
    "escapedName": "nomnom",
    "name": "nomnom",
    "rawSpec": "github:douglasduteil/nomnom#next",
    "spec": "github:douglasduteil/nomnom#next",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:douglasduteil/nomnom.git#next",
      "sshUrl": "git+ssh://git@github.com/douglasduteil/nomnom.git#next",
      "httpsUrl": "git+https://github.com/douglasduteil/nomnom.git#next",
      "gitUrl": "git://github.com/douglasduteil/nomnom.git#next",
      "shortcut": "github:douglasduteil/nomnom#next",
      "directUrl": "https://raw.githubusercontent.com/douglasduteil/nomnom/next/package.json"
    }
  },
  "_requiredBy": [
    "/isparta"
  ],
  "_resolved": "git://github.com/douglasduteil/nomnom.git#96ec52cb430e608a0eadc55c760eeb57dad9a1d8",
  "_shasum": "70616d536a2515bb06f8137883de0f01db2e7a97",
  "_shrinkwrap": null,
  "_spec": "nomnom@github:douglasduteil/nomnom#next",
  "_where": "C:\\Users\\Oscar\\Documents\\PCW\\1.Movilidad\\pcw_mov_server_web\\public\\assets\\plugins\\parsley\\node_modules\\isparta",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/harthur/nomnom/issues"
  },
  "dependencies": {
    "chalk": "~0.4.0",
    "underscore": "~1.6.0"
  },
  "description": "Option parser with generated usage and commands",
  "devDependencies": {
    "nodeunit": "~0.7.4"
  },
  "gitHead": "96ec52cb430e608a0eadc55c760eeb57dad9a1d8",
  "homepage": "https://github.com/harthur/nomnom#readme",
  "keywords": [
    "arguments",
    "option parser",
    "command line",
    "options",
    "parser"
  ],
  "main": "./nomnom",
  "name": "nomnom",
  "optionalDependencies": {},
  "readme": "# nomnom\r\nnomnom is an option parser for node. It noms your args and gives them back to you in a hash.\r\n\r\n```javascript\r\nvar opts = require(\"nomnom\")\r\n   .option('debug', {\r\n      abbr: 'd',\r\n      flag: true,\r\n      help: 'Print debugging info'\r\n   })\r\n   .option('config', {\r\n      abbr: 'c',\r\n      default: 'config.json',\r\n      help: 'JSON file with tests to run'\r\n   })\r\n   .option('version', {\r\n      flag: true,\r\n      help: 'print version and exit',\r\n      callback: function() {\r\n         return \"version 1.2.4\";\r\n      }\r\n   })\r\n   .parse();\r\n\r\nif (opts.debug)\r\n   // do stuff\r\n```\r\n\r\nYou don't have to specify anything if you don't want to:\r\n\r\n```javascript\r\nvar opts = require(\"nomnom\").parse();\r\n\r\nvar url = opts[0];     // get the first positional arg\r\nvar file = opts.file   // see if --file was specified\r\nvar verbose = opts.v   // see if -v was specified\r\nvar extras = opts._    // get an array of the unmatched, positional args\r\n```\r\n\r\n# Install\r\nfor [node.js](http://nodejs.org/) and [npm](http://github.com/isaacs/npm):\r\n\r\n\tnpm install nomnom\r\n\r\n# More Details\r\nNomnom supports args like `-d`, `--debug`, `--no-debug`, `--file=test.txt`, `--file test.txt`, `-f test.txt`, `-xvf`, and positionals. Positionals are arguments that don't fit the `-a` or `--atomic` format and aren't attached to an option.\r\n\r\nValues are JSON parsed, so `--debug=true --count=3 --file=log.txt` would give you:\r\n\r\n```\r\n{\r\n   \"debug\": true,\r\n   \"count\": 3,\r\n   \"file\": \"log.txt\"\r\n}\r\n```\r\n\r\n# Commands\r\nNomnom supports command-based interfaces (e.g. with git: `git add -p` and `git rebase -i` where `add` and `rebase` are the commands):\r\n\r\n```javascript\r\nvar parser = require(\"nomnom\");\r\n\r\nparser.command('browser')\r\n   .callback(function(opts) {\r\n      runBrowser(opts.url);\r\n   })\r\n   .help(\"run browser tests\");\r\n\r\nparser.command('sanity')\r\n   .option('outfile', {\r\n      abbr: 'o',\r\n      help: \"file to write results to\"\r\n   })\r\n   .option('config', {\r\n      abbr: 'c',\r\n      default: 'config.json',\r\n      help: \"json manifest of tests to run\"\r\n   })\r\n   .callback(function(opts) {\r\n      runSanity(opts.filename);\r\n   })\r\n   .help(\"run the sanity tests\")\r\n\r\nparser.parse();\r\n```\r\n\r\nEach command generates its own usage message when `-h` or `--help` is specified with the command.\r\n\r\n# Usage\r\nNomnom prints out a usage message if `--help` or `-h` is an argument. Usage for these options in `test.js`:\r\n\r\n```javascript\r\nvar opts = require(\"nomnom\")\r\n   .script(\"runtests\")\r\n   .options({\r\n      path: {\r\n         position: 0,\r\n         help: \"Test file to run\",\r\n         list: true\r\n      },\r\n      config: {\r\n         abbr: 'c',\r\n         metavar: 'FILE',\r\n         help: \"Config file with tests to run\"\r\n      },\r\n      debug: {\r\n         abbr: 'd',\r\n         flag: true,\r\n         help: \"Print debugging info\"\r\n      }\r\n   }).parse();\r\n```\r\n\r\n...would look like this:\r\n\r\n\tusage: runtests <path>... [options]\r\n\r\n\tpath     Test file to run\r\n\r\n\toptions:\r\n\t   -c FILE, --config FILE   Config file with tests to run\r\n\t   -d, --debug              Print debugging info\r\n\r\n# Options\r\nYou can either add a specification for an option with `nomnom.option('name', spec)` or pass the specifications to `nomnom.options()` as a hash keyed on option name. Each option specification can have the following fields:\r\n\r\n#### abbr and full\r\n`abbr` is the single character string to match to this option, `full` is the full-length string (defaults to the name of the option).\r\n\r\nThis option matches `-d` and `--debug` on the command line:\r\n\r\n```javascript\r\nnomnom.option('debug', {\r\n   abbr: 'd'\r\n})\r\n```\r\n\r\nThis option matches `-n 3`, `--num-lines 12` on the command line:\r\n\r\n```javascript\r\nnomnom.option('numLines', {\r\n   abbr: 'n',\r\n   full: 'num-lines'\r\n})\r\n```\r\n\r\n#### flag\r\n\r\nIf this is set to true, the option acts as a flag and doesn't swallow the next value on the command line. Default is `false`, so normally if you had a command line `--config test.js`, `config` would get a value of `test.js` in the options hash. Whereas if you specify:\r\n\r\n```javascript\r\nnomnom.option('config', {\r\n   flag: true\r\n})\r\n```\r\n\r\n`config` would get a value of `true` in the options hash, and `test.js` would be a free positional arg.\r\n\r\n#### metavar\r\n\r\n`metavar` is used in the usage printout e.g. `\"PATH\"` in `\"-f PATH, --file PATH\"`.\r\n\r\n#### string\r\n\r\nA shorthand for `abbr`, `full`, and `metavar`. For example, to attach an option to `-c` and `--config` use a `string: \"-c FILE, --config=FILE\"`\r\n\r\n#### help\r\n\r\nA string description of the option for the usage printout.\r\n\r\n#### default\r\n\r\nThe value to give the option if it's not specified in the arguments.\r\n\r\n#### type\r\n\r\nIf you don't want the option JSON-parsed, specify type `\"string\"`.\r\n\r\n#### callback\r\n\r\nA callback that will be executed as soon as the option is encountered. If the callback returns a string it will print the string and exit:\r\n\r\n```javascript\r\nnomnom.option('count', {\r\n   callback: function(count) {\r\n      if (count != parseInt(count)) {\r\n         return \"count must be an integer\";\r\n      }\r\n   }\r\n})\r\n```\r\n\r\n#### position\r\n\r\nThe position of the option if it's a positional argument. If the option should be matched to the first positional arg use position `0`, etc.\r\n\r\n#### list\r\n\r\nSpecifies that the option is a list. Appending can be achieved by specifying the arg more than once on the command line:\r\n\r\n\tnode test.js --file=test1.js --file=test2.js\r\n\r\nIf the option has a `position` and `list` is `true`, all positional args including and after `position` will be appended to the array.\r\n\r\n#### required\r\n\r\nIf this is set to `true` and the option isn't in the args, a message will be printed and the program will exit.\r\n\r\n#### choices\r\n\r\nA list of the possible values for the option (e.g. `['run', 'test', 'open']`). If the parsed value isn't in the list a message will be printed and the program will exit.\r\n\r\n#### transform\r\n\r\nA function that takes the value of the option as entered and returns a new value that will be seen as the value of the option.\r\n\r\n```javascript\r\nnomnom.option('date', {\r\n   abbr: 'd',\r\n   transform: function(timestamp) {\r\n     return new Date(timestamp);\r\n   }\r\n})\r\n```\r\n\r\n#### hidden\r\n\r\nOption won't be printed in the usage\r\n\r\n\r\n# Parser interface\r\n`require(\"nomnom\")` will give you the option parser. You can also make an instance of a parser with `require(\"nomnom\")()`. You can chain any of these functions off of a parser:\r\n\r\n#### option\r\n\r\nAdd an option specification with the given name:\r\n\r\n```javascript\r\nnomnom.option('debug', {\r\n   abbr: 'd',\r\n   flag: true,\r\n   help: \"Print debugging info\"\r\n})\r\n```\r\n\r\n#### options\r\n\r\nAdd options as a hash keyed by option name, good for a cli with tons of options like [this example](http://github.com/harthur/replace/blob/master/bin/replace.js):\r\n\r\n```javascript\r\nnomnom.options({\r\n   debug: {\r\n      abbr: 'd',\r\n      flag: true,\r\n      help: \"Print debugging info\"\r\n   },\r\n   fruit: {\r\n      help: \"Fruit to buy\"\r\n   }\r\n})\r\n```\r\n\r\n#### usage\r\n\r\nThe string that will override the default generated usage message.\r\n\r\n#### help\r\n\r\nA string that is appended to the usage.\r\n\r\n#### script\r\n\r\nNomnom can't detect the alias used to run your script. You can use `script` to provide the correct name for the usage printout instead of e.g. `node test.js`.\r\n\r\n#### printer\r\n\r\nOverrides the usage printing function.\r\n\r\n#### command\r\n\r\nTakes a command name and gives you a command object on which you can chain command options.\r\n\r\n#### nocommand\r\n\r\nGives a command object that will be used when no command is called.\r\n\r\n#### nocolors\r\n\r\nDisables coloring of the usage message.\r\n\r\n#### parse\r\n\r\nParses node's `process.argv` and returns the parsed options hash. You can also provide argv:\r\n\r\n```javascript\r\nvar opts = nomnom.parse([\"-xvf\", \"--atomic=true\"])\r\n```\r\n\r\n#### nom\r\n\r\nThe same as `parse()`.\r\n\r\n# Command interface\r\nA command is specified with `nomnom.command('name')`. All these functions can be chained on a command:\r\n\r\n#### option\r\n\r\nAdd an option specifically for this command.\r\n\r\n#### options\r\n\r\nAdd options for this command as a hash of options keyed by name.\r\n\r\n#### callback\r\n\r\nA callback that will be called with the parsed options when the command is used.\r\n\r\n#### help\r\n\r\nA help string describing the function of this command.\r\n\r\n#### usage\r\n\r\nOverride the default generated usage string for this command.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/harthur/nomnom.git"
  },
  "scripts": {
    "test": "nodeunit test/*.js"
  },
  "version": "1.8.1"
}
